<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">
		
	<!-- 准备工作：导入aop（约束）命名空间  -->
	<!-- 1，配置目标对象 -->
	<bean name="userService" class="service.UserServiceImpl"></bean>
	<!-- 2，配置通知对象 -->
	<bean name="myAdvice" class="spring_aop.MyAdvice"></bean>
	<!-- 3，配置将通知织入目标对象 -->
	<aop:config>
		<!-- 配置切入点
			public void + 方法的QualifiedName
			eg: public void service.UserServiceImpl.save()
			void service.UserServiceImpl.save()，默认时public，可以不用写
			* service.UserServiceImpl.save(),任何返回值方法都可以
			* service.UserServiceImpl.*() 该类下任何返回值的任何方法
			
			* service.*ServiceImpl.*(..) 该包下所有的以ServiceImpl为结尾的类，方法括号中的 .. 是指对传参不做要求
			* service..*ServiceImpl.*(..)  该包下所有子包中的以ServiceImpl为结尾的类
		 -->
		<aop:pointcut expression="execution(* service.*ServiceImpl.*(..))" id="pc"/>
		
		<aop:aspect ref="myAdvice">
			<!-- 指定名为before方法作为前置通知 -->
			<aop:before method="before" pointcut-ref="pc"/>
			<!-- 后置通知 -->
			<aop:after-returning method="afterReturning" pointcut-ref="pc"/>
			<!-- 环绕通知 -->
			<aop:around method="around"  pointcut-ref="pc"/>
			<!-- 异常拦截通知 -->
			<aop:after-throwing method="afterException"  pointcut-ref="pc"/>
			<!-- 后置通知 -->
			<aop:after method="after"  pointcut-ref="pc"/>
		</aop:aspect>
	</aop:config>
	
	
</beans>